#!/bin/zsh
export __GIT_PROMPT_DIR=${0:A:h}

# Initialize colors.
autoload -U colors
colors

# Allow for functions in the prompt.
setopt PROMPT_SUBST

autoload -U add-zsh-hook

add-zsh-hook chpwd chpwd_update_git_vars
add-zsh-hook preexec preexec_update_git_vars
#add-zsh-hook precmd precmd_update_git_vars

## Function definitions
function preexec_update_git_vars() {
	${___gnome_vfs:-false} && return 0
		case "$2" in
			git*|hub*|gh*|stg*)
				__EXECUTED_GIT_COMMAND=1
			;;
		esac
}

function precmd_update_git_vars() {
	${___gnome_vfs:-false} && return 0
	if [ -n "$__EXECUTED_GIT_COMMAND" ] || [ ! -n "$ZSH_THEME_GIT_PROMPT_CACHE" ]; then
		update_current_git_vars
		unset __EXECUTED_GIT_COMMAND
	fi
}

function chpwd_update_git_vars() {
	${___gnome_vfs:-false} && return 0
	update_current_git_vars
}

function update_current_git_vars() {
	${___gnome_vfs:-false} && return 0
	if [ -d .git ] || /usr/bin/git rev-parse --git-dir &> /dev/null;then
		unset __CURRENT_GIT_STATUS
		_GIT_STATUS=`/usr/bin/git status --porcelain --branch &> /dev/null | $__GIT_PROMPT_DIR/gitstatus`
		__CURRENT_GIT_STATUS=("${(@s: :)_GIT_STATUS}")
		CURRENT_TAG=$(git describe --tags --exact-match 2>/dev/null)
		if [[ $__CURRENT_GIT_STATUS[1] =~ ^:[[:lower:][:digit:]]{7}$ ]] && [[ -n "$CURRENT_TAG" ]];then
			GIT_BRANCH="tag:$CURRENT_TAG"
		else
			GIT_BRANCH=$__CURRENT_GIT_STATUS[1]
		fi
		GIT_AHEAD=$__CURRENT_GIT_STATUS[2]
		GIT_BEHIND=$__CURRENT_GIT_STATUS[3]
		GIT_STAGED=$__CURRENT_GIT_STATUS[4]
		GIT_CONFLICTS=$__CURRENT_GIT_STATUS[5]
		GIT_CHANGED=$__CURRENT_GIT_STATUS[6]
		GIT_UNTRACKED=$__CURRENT_GIT_STATUS[7]
		unset CURRENT_TAG _GIT_STATUS
	fi
}


git_super_status() {
	${___gnome_vfs:-false} && return 0
	if [ -d .git ] || /usr/bin/git rev-parse --git-dir &> /dev/null;then
		precmd_update_git_vars
		if [ -n "$__CURRENT_GIT_STATUS" ]; then
			if [[ $GIT_BRANCH =~ ^:[[:lower:][:digit:]]{7}$ ]];then
				STATUS="$ZSH_THEME_GIT_PROMPT_PREFIX$ZSH_THEME_GIT_PROMPT_COMMIT${GIT_BRANCH:1}${reset_color}"
			elif [[ $GIT_BRANCH =~ ^tag: ]];then
				STATUS="$ZSH_THEME_GIT_PROMPT_PREFIX$ZSH_THEME_GIT_PROMPT_TAG${GIT_BRANCH:4}${reset_color}"
			else
				STATUS="$ZSH_THEME_GIT_PROMPT_PREFIX$ZSH_THEME_GIT_PROMPT_BRANCH$GIT_BRANCH${reset_color}"
			fi
			if [ "$GIT_BEHIND" -ne "0" ]; then
				STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_BEHIND$GIT_BEHIND${reset_color}"
			fi
			if [ "$GIT_AHEAD" -ne "0" ]; then
				STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_AHEAD$GIT_AHEAD${reset_color}"
			fi
			STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_SEPARATOR"
			if [ "$GIT_STAGED" -ne "0" ]; then
				STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_STAGED$GIT_STAGED${reset_color}"
			fi
			if [ "$GIT_CHANGED" -ne "0" ]; then
				STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CHANGED$GIT_CHANGED${reset_color}"
			fi
			if [ "$GIT_CONFLICTS" -ne "0" ]; then
				STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CONFLICTS$GIT_CONFLICTS${reset_color}"
			fi
			if [ "$GIT_UNTRACKED" -ne "0" ]; then
				STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_UNTRACKED$GIT_UNTRACKED${reset_color}"
			fi
			if [ "$GIT_CHANGED" -eq "0" ] && [ "$GIT_CONFLICTS" -eq "0" ] && [ "$GIT_STAGED" -eq "0" ] && [ "$GIT_UNTRACKED" -eq "0" ]; then
				STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_CLEAN"
			fi
			STATUS="$STATUS${reset_color}$ZSH_THEME_GIT_PROMPT_SUFFIX"
			echo "$STATUS"
		fi
	fi
	#unset STATUS GIT_BRANCH GIT_AHEAD GIT_BEHIND GIT_STAGED GIT_CONFLICTS GIT_CHANGED GIT_UNTRACKED
}

# Default values for the appearance of the prompt. Configure at will.
#
ZSH_THEME_GIT_PROMPT_PREFIX="-["
ZSH_THEME_GIT_PROMPT_SUFFIX="$fg[red]]"
ZSH_THEME_GIT_PROMPT_SEPARATOR=":"
ZSH_THEME_GIT_PROMPT_BRANCH="$fg_bold[magenta]Ôå¢ "
ZSH_THEME_GIT_PROMPT_COMMIT="$fg_bold[magenta]ÔÄü "
ZSH_THEME_GIT_PROMPT_TAG="$fg_bold[magenta]ÔÄ´ "
ZSH_THEME_GIT_PROMPT_STAGED="$fg[green]+"
ZSH_THEME_GIT_PROMPT_UNTRACKED="$fg[red]-"
ZSH_THEME_GIT_PROMPT_CHANGED="$fg[blue]üûÑ"
ZSH_THEME_GIT_PROMPT_CONFLICTS="$fg[red]!"
ZSH_THEME_GIT_PROMPT_BEHIND="ÔÑÉ" #Ôé¢
ZSH_THEME_GIT_PROMPT_AHEAD="ÔÑÇ" #Ôé°
# ÔèÄ deleted
ZSH_THEME_GIT_PROMPT_CLEAN="$fg_bold[green]‚úî"
