#!/usr/bin/ruby
# Encoding: utf-8
# HOOK-CONDITION: [[ ! $(git remote get-url origin) =~ ^(https?://|ssh://aur@)aur.archlinux.org/ ]]
# HOOK-NOPIPE

editor = ENV['EDITOR'] != 'none' ? ENV['EDITOR'] : 'vim'
message_file = ARGV[0]
name = ENV['GIT_DIR'] != 'none' ? '[commit-msg.validate]' : 'Git commit message:'
try = 0
return if message_file.nil?

unless $stdin.isatty
	tmp = File::open('/dev/tty', 'r')
	$stdin.reopen(tmp)
	tmp.close
end

def rules(line_number, line)
    real_line_number = line_number + 1
    if line_number == 0 then
        yield "  error:#{real_line_number}: First line should be less than 50 characters in length." if line.length > 50
        yield "  error:#{real_line_number}: First line should be capitalized." unless /[[:upper:]\[\{\(]/.match(line[0,1])
        yield "  error:#{real_line_number}: First line shouldn't end with a period." if /\.$/.match(line)

    elsif not line[0,1]  == '#' then
        if line_number == 1 then
            yield "  error:#{real_line_number}: Second line should be empty." if line.length > 0
        else
            yield "  error:#{real_line_number}: No line should be over 72 characters long." if line.length > 72
        end
    else
        yield false
    end
end


while try+=1
    len = 0
    commit_msg = []
    errors = []

    File.open(message_file, 'r').each_with_index do |line, line_number|
        commit_msg.push line
        rules line_number, line.strip do |e|
            errors.push e if e
        end
    end

    if try + len > 1 and $stdin.isatty then
        (0 .. len + 3).each do |idx|
            print "\e[1;F\e[0;K"
        end
    end

    unless errors.empty?
        print "#{name} Invalid format\n\n"
        errors.each do |error|
            puts "  #{error}"
        end
        puts ""

        if $stdin.isatty then
            choice = ''

            until %w[y n].include? choice.downcase
            	print "\rFix this commit message? [Y/n] "
                chc = $stdin.gets
                chc = chc == nil ? 'n' : chc.chomp
                choice = chc.length == 0 ? 'y' : chc
                print "\e[1;A"
            end

            len = errors.length
        else
            choice = 'n'
        end
        if choice.downcase == 'n'
        	File.write("#{message_file}~", File.read(message_file))
        	exit 1
        end
        next if system("#{editor} '#{message_file}'")
    end
	break
end
