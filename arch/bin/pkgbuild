#!/bin/bash -e
# shellcheck disable=SC1090,SC1091
getcfg()
{
	local __configfile__
	__configfile__="$1"
	shift
	if [ -f "/etc/${__configfile__}" ]; then
		source "/etc/${__configfile__}" "$@"
	fi
	if [ -f "${XDG_CONFIG_HOME:-$HOME/.config}/pacman/${__configfile__}" ]; then
		source "${XDG_CONFIG_HOME:-$HOME/.config}/pacman/${__configfile__}" "$@"
	elif [ -f "$HOME/.${__configfile__}" ]; then
		source "$HOME/.${__configfile__}" "$@"
	fi
}

getcfg makepkg.conf
getcfg pkgbuild.conf

if [ -d "$CHROOT/root" ] && [[ "$UPTODATE_CHROOT" != "true" ]]; then
	arch-nspawn "$CHROOT/root" pacman -Syu --noconfirm
	export UPTODATE_CHROOT=true
fi

if [ -d "$1" ] && [ -f "$1/PKGBUILD" ]; then
	cd "$1"
	shift
elif [ -f "$1" ] && [[ $1 =~ PKGBUILD$ ]]; then
	cd "$(dirname "$1")"
	shift
elif [[ $1 == --list ]] && [ -f "$2" ]; then
	BUILD_DIR="$(realpath "$(dirname "$2")/../aur-build")"
	export BUILD_DIR
	exec "$0" --stdin < "$2"
elif [[ $1 == --stdin ]]; then
	set +e
	mkdir -p "${BUILD_DIR:-aur-build}"
	cd "${BUILD_DIR:-aur-build}"
	unset BUILD_DIR
	while read -r cmd pkg; do
		if [[ $cmd = make && -n $pkg ]]; then
			"$0" "$pkg"
			if [[ $? == 130 ]]; then
				break
			fi
		fi
	done
	exit
elif ! [ -d "$1" ]; then
	git clone pkg:"$1" \
		&& cd "$1" \
		|| exit 1
	shift
fi

unset UPTODATE_CHROOT
if [ -d .git ]; then
	git reset --hard
	git pull origin master
fi
if [ -f PKGBUILD ]; then
	source ./PKGBUILD
else
	echo run this script inside a directory with a PKGBUILD.
	exit 1
fi
if [ -f WIP ]; then
	echo This is a Work-in-Progress PKGBUILD.
	exit 0
fi

if [ -n "$REBUILD" ] && [ "$REBUILD" != "true" ]; then
	unset REBUILD
fi

if ! [[ -n $REBUILD ]] && [[ -e .no-build ]]; then
	exit
fi

if type -t pkgver | grep -wq function; then
	makepkg --nobuild
fi

REPO="${REPONAME}${REPOEXT}"
if [ ! -f "${PKGREPO:-$PWD}/${REPO}" ] || [ ! -f ~/.config/repoctl/config.toml ]; then
	repoctl config new "${PKGREPO:-$PWD}/${REPO}"
fi

while read -r pkg; do
	if [ -f "${PKGREPO:-$PWD}/${pkg##*/}" ] && [[ $REBUILD != "true" ]]; then
		echo "Already built in repo."
		exit 0
	elif (! echo "$*" | grep -q '\-f') && [ -f "$pkg" ] && [ -z "$REBUILD" ]; then
		REBUILD=true
		break
	fi
done < <(makepkg --packagelist)

set -- --clean --cleanbuild --syncdeps --nosign --nocheck --noconfirm ${REBUILD:+--force} "$@"

if [ -z "$CHROOT" ]; then
	makepkg "$@"
elif command -v makechrootpkg > /dev/null 2>&1; then
	echo "$@"
	makechrootpkg -ucnr "$CHROOT" -- "$@" \
		&& makepkg --packagelist | while read -r pkg; do
			gpg -u "$GPGKEY" --detach-sign "$pkg"
		done || exit 1
fi

makepkg --packagelist | while read -r pkg; do
	repoctl add -mrs "$pkg"
done

source PKGBUILD
exclude+=(
	-e '*.log'
	-e 'PKGBUILD.bak'
	-e '.no*'
)
for src in "${source[@]}"; do
	src=${src%%::*}
	src=${src##*/}
	if [ -e "$src" ]; then
		exclude+=('-e' "${src}")
	fi
done

fakeroot rm -rf src pkg
git clean -fxd "${exclude[@]}"

logs=(
	-not -name "${pkgbase:-$pkgname}-${epoch:+${epoch}}${pkgver}-${pkgrel}-$(uname -m)-*.log"
)
if [ "$(typeset -p pkgname | awk '{print $2}')" = "-a" ]; then
	for pkg in "${pkgname[@]}"; do
		logs+=(
			-not -name "${pkg}-${epoch:+${epoch}}${pkgver}-${pkgrel}*-namcap.log"
		)
	done
else
	logs+=(
		-not -name "${pkgname}-${epoch:+${epoch}}${pkgver}-${pkgrel}*-namcap.log"
	)
fi
find -mindepth 1 -maxdepth 1 -name '*.log' \( -empty -or "${logs[@]}" \)
