#!/bin/bash
function pypi:pkgver
{
	curl -s "https://pypi.org/pypi/$1/json" | jq -r '.info.version'
}

function github:pkgver
{
	curl -sH "Accept: application/vnd.github.v3+json" "https://${2:-api.github.com}/repos/$1/tags" \
		| jq -r 'if (.[]|length)>0 then .[0].name, halt else null end|.|=sub("v(?<ver>.*)";"\(.ver)")'
}

function gitlab:pkgver
{
	curl -s "https://${2:-gitlab.com}/api/v4/projects/${1//\//%2F}/repository/tags" \
		| jq -r 'if (.[]|length)>0 then .[0].name, halt else null end|.|=sub("v(?<ver>.*)";"\(.ver)")'
}

function py:deps
{
	local -a overrides
	overrides=(
		-e 's/pygobject/gobject/'
	)
	sed -E "${overrides[@]}"
}

function pip:deps
{
	sed -En "s/^([[:alnum:]]+)==([[:digit:].]+)\.\*,>=([[:digit:].]+)(|; sys_platform == \"linux\")$/python-\1<\2\npython-\1>=\3/p" \
		| awk -F '<|\\.' '$0 ~ /<.*[[:digit:]]$/{print $1"<"$NF+1".0.0"};$0 !~ /<.*[[:digit:]]$/' \
		| py:deps
}

function poetry:deps
{
	dephell deps convert \
		--from pyproject.toml \
		--to-format=pip \
		--to-path=stdout 2> /dev/null | pip:deps
}

function pypi:deps
{
	curl -s "https://pypi.org/pypi/$1/json" \
		| jq -r '.info.requires_dist[]?' \
		| sed -En \
			's/^([[:alnum:]]+)\s*\(>=([[:digit:].]+),<([[:digit:].]+)\)(|; sys_platform == \"linux\")$/python-\1<\3\npython-\1>=\2/p' \
		| py:deps
}

function use_vpn
{
	local task
	test -n "$USE_VPN" || return 0
	[ "$1" = "c" ] || task="dis"
	echo -ne "vpn: ${task}connecting   \r"
	false
	until windscribe "${task}connect" > /dev/null 2>&1; do
		sleep 1
	done
	echo "vpn: ${task}connected   "
}
trap 'exit' INT
function lock
{
	local FD LOCKFILE
	trap no_more_locking EXIT TERM
	FD=$(shuf -i 1-1000 -n 1)
	LOCKFILE="${1:-$PWD}/lock.lck"
	eval "exec $FD>$LOCKFILE"
	eval "_lock()             { flock -\$1 $FD; }"
	no_more_locking()
	{
		_lock u
		_lock xn && rm -f "$LOCKFILE"
		unset _lock
	}
	_lock xn || {
		echo "Failed to lock ${1:-$PWD}"
		return 1
	}
}
#if ! netcat -zw3 aur.archlinux.org ssh && test -n "$(which --skip-functions --skip-alias windscribe)";then
#	USE_VPN=true
#fi
if (($# == 0)); then
	set -- ./*/
elif [[ $1 == --stdin ]]; then
	shift
	while read -r line; do
		set -- "$@" "$line"
	done
fi
locked=''
for pkgpath in "$@"; do
	repo="$(git -C "$pkgpath" rev-parse --show-toplevel 2> /dev/null)"
	if readlink "$repo/.git/hooks/prepare-commit-msg" 2> /dev/null \
		| grep -q '/aurpublish/' \
		|| test -f "$repo/.aurpublish"; then
		aurpublish=1
		if [ "$locked" != "$repo" ]; then
			if [ -f "$locked/lock.lck" ]; then
				rm -f "$locked/lock.lck"
			fi
			lock "$repo" || continue
			locked="$repo"
		fi
	fi
	if [ -f "$pkgpath/PKGBUILD" ] && [ ! -e "$pkgpath/WIP" ]; then
		if ((aurpublish)); then
			cd "$repo"
			find \
				-mindepth 1 -maxdepth 1 \
				-type d -not -name '.git' \
				-not -name "$(basename "$pkgpath")" -print0 \
				| git stash push --pathspec-from-file=- --pathspec-file-nul > /dev/null 2>&1
			cd "$OLDPWD"
		fi
		(
			lock "$pkgpath" || exit
			typeset -a exclude source
			pkgver=0
			pkgrel=0
			cd "$pkgpath" > /dev/null 2>&1 || exit
			if git stash push -- . 2> /dev/null | grep -q '^Saved'; then
				stashed=1
			fi
			use_vpn c
			git pull
			if ((aurpublish)); then
				aurpublish -p "$PWD"
			fi
			use_vpn d
			if ((stashed)); then
				git stash pop > /dev/null 2>&1
			fi
			source ./PKGBUILD
			srcdir=src
			if grep -m 1 -q '^# pkg:' PKGBUILD; then
				type=$(awk '/^# pkg: /{print $3}' PKGBUILD)
				src=$(awk '/^# pkg: /{print $4}' PKGBUILD)
				provider=$(awk '/^# pkg: / && NF > 4 {print $5}' PKGBUILD)
				case $type in
					bzr | git | hg | svn)
						makepkg -o -d --skipchecksums
						PKGVER=$(pkgver)
						;;
					*)
						if [ "$(type -t "$type:pkgver")" = "function" ]; then
							PKGVER=$("$type:pkgver" "${src:-${_name:-${pkgbase:-$pkgname}}}" "$provider")
						else
							PKGVER=0
						fi
						;;
				esac
				if [ "$(vercmp ${PKGVER:-0} $pkgver)" = "1" ]; then
					sed -Ei "s/^(pkgver=)(\"|'|)$pkgver(\"|'|)$/\1\2$PKGVER\3/g;s/^(pkgrel)=.*/\1=1/g" PKGBUILD
					msg="[${src:-${_name:-${pkgbase:-$pkgname}}}] Updated to $PKGVER-1"
				fi
				for dep in ${type} ${src} ${provider}; do
					if
						type -t "${dep}:deps" 2> /dev/null \
							| grep -wq function
					then
						depfunc=$dep
						unset dep
						break
					fi
				done
				if [[ -n $depfunc ]]; then
					makepkg --nobuild
					sed -Ei.bak '/^depends=\(/,/\)/{/#auto-deps$/d}' PKGBUILD
					(
						for dir in ${pkgname}-${pkgver} ${_name} ${pkgname%*-git}; do
							if test -d "$srcdir/$dir"; then
								cd "$srcdir/$dir" || continue
								break
							fi
						done
						"${depfunc}:deps" "${src}"
					) | while read -r line; do
						sed -Ei.bak "/^depends=\(/,/\)/{s@^\)\$@\t'$line' #auto-deps\n\)@}" PKGBUILD
					done
					unset depfunc
				fi
			fi
			echo updating checksums
			updpkgsums -m
			if [ -n "$(git status --porcelain .)" ] || [ "${FORCE_REL_BUMP+defined}" ] && [ "$FORCE_REL_BUMP" != "false" ]; then
				if [ -z "$PKGVER" ] || [ "$(vercmp $PKGVER $pkgver)" = "0" ]; then
					sed -Ei "s/^(pkgrel=)[[:digit:]]+$/\1$((pkgrel + 1))/" PKGBUILD
					msg="[${src:-${_name:-${pkgbase:-$pkgname}}}] pkgrel bump."
				fi
				[ -f ../.nopush ] && msg='[nopush] '"${msg:-automatic commmit.}"
				if ((aurpublish)); then
					makepkg --printsrcinfo > .SRCINFO
				fi
				git add .
				if ((aurpublish)); then
					git commit --no-edit
				else
					git commit -m "${msg:-automatic push.}"
				fi
			fi
			if git status --porcelain --branch | grep -q ahead && {
				[ ! -f ../.nopush ] || [ "${SKIP_PUSH+defined}" ] && [ "$SKIP_PUSH" != "false" ]
			}; then
				use_vpn c
				git push
				if ((aurpublish)); then
					aurpublish "$PWD"
				fi
				use_vpn d
			fi
			exclude+=(
				-e '*.log'
				-e 'PKGBUILD.bak'
				-e '.no*'
			)
			for src in "${source[@]}"; do
				src=${src%%::*}
				src=${src##*/}
				src=${src%.git}
				if [ -e "$src" ]; then
					exclude+=('-e' "${src}")
				fi
			done
			fakeroot rm -rf src pkg
			git clean -fxd "${exclude[@]}" .
		)
		if ((aurpublish)); then
			cd "$repo"
			git stash pop > /dev/null 2>&1
			cd "$OLDPWD"
		fi
	fi
done
