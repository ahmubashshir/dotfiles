#!/usr/bin/env python3
#
# Copyright 2021 Ahmad Hasan Mubashshir <ahmubashshir@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
#


import sys
import re
import os

from pydbus import SessionBus
from os import environ, path
from threading import Thread
from gi.repository import GLib
from lxml.html import document_fromstring as html_fromstr

try:
    import undetected_chromedriver as uc
except ImportError:
    pass
else:
    print("Monkeypatching webdriver.")
    uc.install()

try:
    from selenium import webdriver
except ModuleNotFoundError:
    print("selenium not installed")
    exit()

from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC


class BThread(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.browser = None
        self.ec = EC.presence_of_element_located(
            (By.XPATH, '/html/body/script[contains(text(), "xToken")]'))

    @property
    def loaded(self):
        try:
            return bool(self.ec(self.browser))
        except:
            return False

    def run(self):
        options = webdriver.ChromeOptions()
        options.add_argument("start-maximized")
        options.add_argument("user-agent={}".format(os.environ.get('USER_AGENT',
                                                                   'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36')))
        options.headless = True
        self.browser = webdriver.Chrome(
            options=options, executable_path=environ['CHROMEDRIVER_PATH'])


class Scrapper(object):
    """
    <node>
            <interface name='local.scrapper'>
                    <method name='load'>
                            <arg type='s' name='url' direction='in'/>
                    </method>
                    <method name='quit' />
                    <property name="token" type="s" access="read" />
                    <property name="page" type="s" access="read" />
                    <property name="loaded" type="b" access="read" />
            </interface>
    </node>
    """
    __token = None

    def __init__(self, loop=None):
        if not loop:
            raise RuntimeError("Main Loop not defined")
        else:
            self.loop = loop
            self.thread = BThread()
            self.thread.start()

    def load(self, url):
        self.__token = None
        self.thread.browser.get(url)
        return None

    def quit(self):
        self.loop.quit()
        self.thread.browser.quit()
        self.thread.join()
        return None

    @property
    def page(self):
        if self.thread.loaded:
            return self.thread.browser.page_source
        return ""

    @property
    def loaded(self):
        return self.thread.loaded

    @property
    def token(self):
        if self.thread.loaded and not self.__token:
            html = html_fromstr(self.thread.browser.page_source)
            data = next(
                iter(
                    html.xpath(
                        '/html/body/script[contains(text(), "xToken")]/text()')
                ))
            data = next(
                n.strip(' ') for n in data.splitlines() if n.find('Token') >= 0
            )
            self.__token = re.sub(".*'?x=(.*)';", r'\1', data)

        return self.__token or ""


if __name__ == '__main__':
    if not (
            len(environ.get('CHROMEDRIVER_PATH', '')) > 0 and
            path.isfile(environ['CHROMEDRIVER_PATH']) and
            os.access(environ['CHROMEDRIVER_PATH'], os.X_OK)
    ):
        sys.exit(1)

    bus_name = "local.scrapper.instance%d" % os.getpid()
    print(bus_name)

    try:
        pid = os.fork()
        if pid > 0:
            os.waitpid(pid, 0)
            sys.exit(0)
    except OSError:
        sys.exit(1)

    os.setsid()
    fd = os.open("/dev/null", os.O_RDWR)
    os.dup2(fd, 0)
    os.dup2(fd, 1)
    os.dup2(fd, 2)
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
        # pass
    except OSError:
        sys.exit(1)

    bus = SessionBus()
    loop = GLib.MainLoop()
    with bus.request_name(bus_name):
        bus.register_object("/scrapper", Scrapper(loop=loop), Scrapper.__doc__)
        loop.run()
