#!/bin/bash
function repo_exists
{
	git ls-remote -q "$1" HEAD 2> /dev/null 1>&2
}

function repostrip
{
	sed -nE -e "s;$1;\1;g" -e 's;\.git$;;;p'
}

function match_remote
{
	# match_remote <remote> <hostspec-regex>
	git remote get-url "${1}" | grep -xqE "${2}"'[[:alnum:]_-]+/[[:alnum:]._-]+(\.git|$)'
}

function fork_setup
{
	default=$(
		git remote show upstream 2>&3 \
			| grep "HEAD branch" \
			| awk '{print	$3}'
	)

	git config branch.$default.remote upstream
	git config branch.$default.pushRemote origin
	git config remote.pushDefault origin
	echo "configured the fork" >&2
}

function gh_fork
{
	local org repo user upstream
	read -r org < <(git config --get "fork.github.com.org")
	read -r user < <(gh api user --jq '.login')
	read -r repo < <(while (($# > 0)); do
		[[ $1 == --fork-name ]] && echo "$2" && break
		shift
	done)
	read -r upstream < <(
		git remote get-url upstream \
			| repostrip '^.*[/:]([^/]+/[^/]+)$'
	)
	[[ -n "$repo" ]] || set -- --fork-name "${REPO_NAME%.git}" "$@"
	[[ -z "$org" ]] || set -- --org "$org" "$@"
	if ! repo_exists "https://github.com/${org:-$user}/${repo:-$REPO_NAME}"; then
		gh repo fork --remote --remote-name origin "$@"
	else
		printf '\e[32m✓\e[m Fork exists \e[1m%s\e[m\n' "${org:-$user}/${repo:-$REPO_NAME}"
		git remote add origin "https://github.com/${org:-$user}/${repo:-$REPO_NAME}"
		printf '\e[32m✓\e[m Added remote \e[1m%s\e[m\n' "origin"
		gh repo set-default "$upstream"
	fi
}

if ! git remote | grep -xqw upstream; then
	git remote rename origin upstream
	read -r REPO_NAME < <(
		git remote get-url upstream \
			| repostrip '^.*/([^/]+)$'
	)

	if match_remote upstream '(https://|git@)github\.com(/|:)'; then
		gh_fork "$@"
		#	elif match_remote upstream '(https://|git@)gitlab\.com(/|:)'; then
		#		gl_fork "$@"
	else
		echo "I don't know how to fork this remote:" >&2
		echo "   $(git remote get-url upstream)" >&2
	fi

	if ! git remote | grep -xqw origin; then
		git remote rename upstream origin
		echo "Failed to fork" >&2
		exit
	fi
	fork_setup
elif git remote | grep -xqw upstream; then
	echo "Already has upstream" >&2
	fork_setup
else
	echo "No upstream remote available" >&2
fi
