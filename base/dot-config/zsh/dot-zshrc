#!/bin/zsh
if [ -e ~/zprof ] || [ -p ~/pipe:zsh ];then
	zmodload zsh/datetime
	setopt PROMPT_SUBST
	PS4='+$EPOCHREALTIME %N:%i> '
	if [ -p ~/pipe:zsh ];then
		logfile=~/pipe:zsh
	else
		logfile=$(mktemp /tmp/zsh_profile.XXXXXXXX)
	fi
	echo "Logging to $logfile"
	exec 3>&2 2>$logfile
	setopt XTRACE
fi
# source
source ~/.config/shell/import
## options
zsh_options=(
	extended_glob prompt_subst rematchpcre beep
	no_nomatch null_glob c_bases no_flow_control
	auto_continue auto_cd auto_pushd pushd_silent
	pushd_to_home pushd_ignore_dups pushd_minus
	auto_list glob_complete list_packed
)
setopt $zsh_options
unset zsh_options
bindkey -e

## Lazy load section
autoload -Uz add-zsh-hook compinit
autoload -Uz "${ZDOTDIR:-$HOME/.zsh}/functions"/^_*~*.zwc(-.:t) >&3 2>&1

load rc plughooks
zplug --path "$ZDOTDIR/omz/plugins"
___plugins=(
	"$ZDOTDIR/.zshrc"(:P:h:h:h:h)
	"$ZDOTDIR/plugins"/*(-/:P:t5)
	"$ZDOTDIR/omz"(:P:t4)
)

if ((${#___plugins[@]} > 1));then
	if ! zplug defer;then
		git -C "${___plugins[1]}" submodule init --quiet "${___plugins[@]:1}"
		if ! git -C "${___plugins[1]}" submodule update --progress "${___plugins[@]:1}"
		then
			printf "zsh: failed to initialize plugins\n"
			function zsh-defer {
				"$@"
			}
		else
			printf "zsh: finished cloning modules\n"
			zplug defer
		fi
	else
		"$ZDOTDIR/ztasklocked" exec \
			git -C "${___plugins[1]}" submodule update --progress "${___plugins[@]:1}" &!
	fi
fi
unset ___plugins

typeset -A ENV
#zsh-defer source /usr/share/doc/pkgfile/command-not-found.zsh
load rc completion keymap history modules plugins prompt transient-prompt

[[ $(get_term) =~ ^(.*geany.*|octopi)$ ]] && unset HISTFILE

zcompinit
if [ -e zprof ];then
	unsetopt XTRACE
	exec 2>&3 3>&-
fi

# zplug startup-timer
