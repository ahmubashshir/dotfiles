#!/bin/zsh
ENV[prompt_filter]='[[:cntrl:]]\[((<->([ABCDEFGJKST]|;<->[Hf]))|[su]|\?<->[hl]|<->(;<->(;<->(;<->|)|)|)m)'
ENV[prompt_suffix]='%(?..%F{cyan})┠'
ENV[prompt_prefix]='%(?..%F{cyan})┨'
ENV[prompt_seperator]='%(?..%F{cyan})'

case "$TERM" in
	xterm|xterm-color|*-256color|*-kitty|alacritty) ENV[color_prompt]=yes;;
esac

function xterm_title_precmd {
	print -Pnf '\e]2;[%s] <idle>\a' -- '%m %3~'
}
function xterm_title_preexec {
	print -Pnf '\e]2;[%s] %s\a' -- '%m %2~' '${1}'
}
function reset_broken_terminal {
	printf '%b' '\e[0m\e(B\e)0\017\e[?5l\e7\e[0;0r\e8'
}
# zsh hooks
if [[ "$TERM" == (alacritty*|gnome*|konsole*|putty*|rxvt*|screen*|tmux*|xterm*) ]]; then
	add-zsh-hook -Uz precmd reset_broken_terminal
	add-zsh-hook -Uz precmd xterm_title_precmd
	add-zsh-hook -Uz preexec xterm_title_preexec
fi

function check_stderr {
	emulate -L zsh
	setopt histsubstpattern
	local out err
	err=/dev/fd/2
	out=/dev/fd/1

	if [[ ! $err -ef $out ]]; then
		print -P "%B%F{green}INFO:%f %F{blue}stderr%f -> %F{red}${err:P:s+#/dev/+dev+}%f%b"
	fi
}

# Prompt Setup
DIR_PROMPT='%20>...>%1~%<<'
PROMPT='${DIR_PROMPT} %% '

if [[ $ENV[color_prompt] = yes ]];then
	if [[ -z "$TMUX" && -z "$TMUX_PLUGIN_MANAGER_PATH" ]];then
		DATE_TIME_PROMPT=''
		DATE_TIME_PROMPT+="${ENV[prompt_prefix]}"
		DATE_TIME_PROMPT+="%B%F{blue}%D{%I}%F{green}:%F{blue}%D{%M}%F{green}:"
		DATE_TIME_PROMPT+="%F{blue}%D{%S}%F{green}%D{%p}%b%F{red}${ENV[prompt_suffix]}"
	fi
	DIR_PROMPT="${ENV[prompt_prefix]}%F{green}%1{"$'\xef\x81\xbb\x00'"%} %F{cyan}%B${DIR_PROMPT}%b%F{red}${ENV[prompt_suffix]}"
	RET_PROMPT='%(?.%F{red}.%B%?%b%F{cyan}┃)%(?.:).:|)%2{┠╯%}%f'
	if ! [[ $TERM == xterm-kitty && $_ksi_fd -gt 2 ]]; then
		typeset -gi OLDCOLUMNS=COLUMNSs
		__prompt_up_1_line () { unset __ZSH_WINCH_ONCE; }
		add-zsh-hook precmd __prompt_up_1_line

		TRAPWINCH () {
			if (( OLDCOLUMNS - COLUMNS == 1)); then
				echoti cr
				echoti el
				echoti cr
				zle reset-prompt
			elif (( OLDCOLUMNS / COLUMNS > 0)); then
				echoti cuu $(( (OLDCOLUMNS / COLUMNS) + (__ZSH_WINCH_ONCE++ == 0) ))
				zle reset-prompt
			fi
			OLDCOLUMNS=COLUMNS
		}
	fi
	# init
	RPS1=''
	PROMPT=''
	# setup
	PROMPT+=$'%0{\r%}%E%(?.%F{red}.%F{cyan})╭─${DIR_PROMPT}'
	PROMPT+=$'${GITSTATUS_PROMPT}${DEVPROMPT_PROMPT}${GIOVFS_PROMPT}'
	PROMPT+=$'%-$((2 + ${#${(S%%)DATE_TIME_PROMPT}//$~ENV[prompt_filter]/}))>─>${(pl:COLUMNS::─:)}%<<'
	PROMPT+=$'${DATE_TIME_PROMPT}╮%1{\n\r%}'
	PROMPT+=$'%0{\r%}%E╰─%(?..%F{cyan})${ENV[prompt_prefix]}%1{\xEE\xAE\x89%} %F{lightgreen}'
	# transient prompt
	TPROMPT=$'%0{\r%}%E%B%(?.%F{red}.%F{cyan})%(3~|%6>…>%-1~%<</…/%16>…>%1~%<<|%16>…>%2~%<<) %# %f%b'
	RPROMPT=$'${RET_PROMPT}'
fi
