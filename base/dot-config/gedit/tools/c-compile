#!/bin/bash
# [Gedit Tool]
# Input=nothing
# Output=output-panel
# Shortcut=<Shift>F1
# Applicability=titled
# Save-files=document
# Languages=arduino,c,cpp,java
# Name=Compile...

get_avr()
{
	local key val i
	key="${1%%=*}"
	val="${1#*=}"
	case "$key" in
		MCU | mcu)
			declare -g MCU="${val,,}"
			args+=("-mmcu=$MCU")
			;;
		FMT | fmt)
			case "$val" in
				binary | bin) val=binary ;;
				srec | srcrec) val=srec ;;
				hex | ihex | intel | *) val=ihex ;;
			esac
			declare -g FMT="$val"
			;;
		SECTION | section)
			if [[ "$key" != "$val" ]]; then
				for i in eeprom lock fuse signature sig; do
					case ":${val^^}:" in
						*:${i^^}:*) declare -gi "${i^^}=1" ;;
					esac
				done
			else
				__hint "Valid Sections: eeprom lock fuse signature/sig"
			fi
			;;
	esac
	if ((${#AVR_OUT[@]} == 0)); then
		declare -rgA AVR_OUT=(
			["ihex"]="hex"
			["binary"]="bin"
			["srec"]="srec"
		)
	fi
}

for_triplet()
{
	local cmd="$1" exec=''
	shift
	if [[ $cmd == exec ]]; then
		cmd="$1"
		shift
		exec=exec
	fi
	if ((STRIP_OUTPUT)) && [[ $exec == exec ]]; then
		exec=''
		set -e
	fi

	if [[ "$TARCH$TSYSTEM$TABI" ]] && hash -- "$TARCH-$TSYSTEM-$TABI-$cmd"; then
		echo "+ $TARCH-$TSYSTEM-$TABI-$cmd $*" >&2
		$exec "$TARCH-$TSYSTEM-$TABI-$cmd" "$@"
	else
		[[ "$TARCH$TSYSTEM$TABI" ]] && echo "'$TARCH-$TSYSTEM-$TABI-$cmd' not found" >&2 && echo "Using '$cmd'" >&2
		echo "+ $cmd $*" >&2
		$exec "$cmd" "$@"
	fi
}

get_pkg()
{
	if pkg-config "$1"; then
		readarray -t -O "${#args[@]}" args < <(
			for_triplet pkg-config --cflags --libs "$1" | tr -s ' ' '\n'
		)
	else
		__error "pkg-config: $1 not found."
	fi
}

get_triplet()
{
	[[ -z $1 ]] || read -r TARCH TSYSTEM TABI <<< "$1"

	case "$TARCH" in
		amd64)
			TARCH=x86_64
			HFTARCH=amd64
			;;
		i?86 | x86)
			TARCH=i686
			HFTARCH=i386
			;;
	esac

	case "$TSYSTEM/$TABI" in
		w64/mingw32) OUTPUT=exe ;;
	esac
}

get_output()
{
	[[ -z $1 ]] || OUTPUT="$1"
}

get_strip()
{
	[[ $1 == "false" ]] || STRIP_OUTPUT=1
	[[ $1 == "false" ]] || read -ra STRIP_ARGS <<< "$1"
}

get_file()
{
	echo '# file <path> is deprecated!' >&2
	files+=("$1")
}

get_arduino()
{
	case "$1" in
		list) exec arduino-cli board list ;;
		auto) mapfile -t -O "${#args[@]}" args < <(
			arduino-cli board list --format jsonmini \
				| jq -r 'first
			| [
				"--fqbn",
				(.matching_boards | first | .fqbn),
				"--port",
				(.port | .address)
			]
			| join("\n")' \
				| tee /dev/stderr 2> >(sed -n '2s/^/@ fqbn /p;4s/^/@ port /p' >&2)
		) ;;
		[0-9]*) mapfile -t -O "${#args[@]}" args < <(
			arduino-cli board list --format jsonmini \
				| jq -r '.['"$1"']
			| [
				"--fqbn",
				(.matching_boards | first | .fqbn),
				"--port",
				(.port | .address)
			]
			| join("\n")'
		) ;;
	esac
}

HELPERS=(
	'arduino <arg>:     Select arduino automatically.'
	'    list: List connected boards'
	'    N:    Connect to Nth board.'
	'    auto: Select first connected board'
	'avr[avr-gcc]: AVR Specific arguments'
	'    (required) mcu=<microcontroller>'
	'    (optional) fmt=<bin|srec|hex>   (default: hex)'
	'    (optional) section=<eeprom|lock|fuse|sig> (default: empty)'
	'pkg[pkg-config] PKG-CONFIG cflags and ldflags'
	'triplet: Specify system triplet'
	'output : Specify output extension'
	'strip  : Strip program after compilation [pass arguments to strip with this]'
)
FILTER=compile
## start args
source "${0%/*}/.lib/args"
## end args

case "$TYPE/${NAME##*.}" in
	x-csrc/ino) TYPE=x-arduino ;;
	x-csrc/c) grep -qxE '\s*#\s*include\s*<avr/\w+.h>' "$NAME" && TYPE="x-avr-csrc" ;;
esac
for file in "${files[@]}"; do
	echo "% file $file"
done >&2
echo "#################" >&2

ONAME="${NAME}${TARCH:+.${HFTARCH:-$TARCH}}.${OUTPUT:-elf}"
case "$TYPE" in
	x-csrc) for_triplet exec gcc "${files[@]}" -o "${ONAME}" "${args[@]}" ;;
	x-c++src) for_triplet exec g++ "${files[@]}" -o "${ONAME}" "${args[@]}" ;;
	x-java)
		cd "$DIR" || exit 1
		exec javac "${args[@]}" "$NAME"
		;;
	x-arduino) exec arduino-cli-log compile "${args[@]}" --no-color "$DIR" ;;
	x-avr-csrc)
		set -e
		if [[ -z "$MCU" ]]; then
			__error "No target MCU defined"
			__hint "Add \`# avr MCU=<MCU>\` as comment."
			false
		fi

		if ! command -pv avr-gcc 2> /dev/null >&2; then
			__error "avr-gcc not installed."
			false
		fi

		avr-gcc -Wall -Os "${files[@]}" -o "$NAME.$MCU.out" "${args[@]}"
		avr-size -C "--mcu=$MCU" "$NAME.$MCU.out"
		(
			[[ "$FMT" ]] || FMT=ihex
			avr-objcopy -R .eeprom -R .fuse -R .lock -R .signature \
				-O "$FMT" "$NAME.$MCU.out" "$NAME.$MCU.${AVR_OUT["$FMT"]}"
			avr_objcopy()
			{
				avr-objcopy --no-change-warnings -j ".$1" --change-section-lma ".$1=0" \
					-O "$FMT" "$NAME.$MCU.out" "$NAME.$MCU.${2:-$1}.${AVR_OUT["$FMT"]}"
			}
			((!EEPROM)) || avr_objcopy eeprom
			((!FUSE)) || avr_objcopy fuse
			((!SIGNATURE && !SIG)) || avr_objcopy signature sig
			((!LOCK)) || avr_objcopy lock
		)
		rm -f "$NAME.$MCU.out"
		;;
	*)
		echo "Unsupported: text/${TYPE}" >&2
		exit 1
		;;
esac

if ((STRIP_OUTPUT)) && [[ $TYPE =~ ^x-c(|\+\+)src$ ]]; then
	unset STRIP_OUTPUT
	for_triplet exec strip "${STRIP_ARGS[@]}" "${ONAME}"
fi
