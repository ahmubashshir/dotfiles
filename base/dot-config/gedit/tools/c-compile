#!/bin/bash
# [Gedit Tool]
# Input=nothing
# Output=output-panel
# Shortcut=<Shift>F1
# Applicability=titled
# Save-files=document
# Languages=c,cpp,java
# Name=Compile...

export TERM=dumb
TYPE=${GEDIT_CURRENT_DOCUMENT_TYPE#*/}
NAME=${GEDIT_CURRENT_DOCUMENT_NAME}
DIR=${GEDIT_CURRENT_DOCUMENT_DIR}
declare -ga args files
files=("$NAME")

get_avr()
{
	local key val i
	key="${1%%=*}"
	val="${1#*=}"
	case "$key" in
		MCU | mcu)
			declare -g MCU="${val,,}"
			args+=("-mmcu=$MCU")
			;;
		FMT | fmt)
			case "$val" in
				binary | bin) val=binary ;;
				srec | srcrec) val=srec ;;
				hex | ihex | intel | *) val=ihex ;;
			esac
			declare -g FMT="$val"
			;;
		SECTION | section)
			if [[ "$key" != "$val" ]]; then
				for i in eeprom lock fuse signature sig; do
					case ":${val^^}:" in
						*:${i^^}:*) declare -gi "${i^^}=1" ;;
					esac
				done
			else
				__hint "Valid Sections: eeprom lock fuse signature/sig"
			fi
			;;
	esac
	if ((${#AVR_OUT[@]} == 0)); then
		declare -rgA AVR_OUT=(
			["ihex"]="hex"
			["binary"]="bin"
			["srec"]="srec"
		)
	fi
}
get_file()
{
	files+=("$1")
}
get_pkg()
{
	if pkg-config "$1"; then
		readarray -t -O "${#args[@]}" args < <(
			pkg-config --cflags --libs "$1" | tr -s ' ' '\n'
		)
	else
		__error "pkg-config: $1 not found."
	fi
}

get_help()
{
	cat >&2 << EOF
Usage:
   :arg           -> arg
   @option  [arg] -> --option [arg]
   @-option [arg] -> -option  [arg]
   #helper  [arg]
    ->  Modify environment by running
        <helper> with [arg]
    -> available helpers:
       -> avr[avr-gcc] pkg[pkg-config]
EOF
	exit
}

__hint()
{
	while [[ $1 ]]; do
		echo " HINT: $1"
		shift
	done >&2
}

__error()
{
	while [[ $1 ]]; do
		echo "ERROR: $1"
		shift
	done >&2
}

case "$TYPE" in
	x-arduino) FILTER="compile" ;;
	x-csrc) grep -qxE '\s*#\s*include\s*<avr/\w+.h>' "$NAME" && TYPE="x-avr-csrc" ;;
esac

declare -i compiler_hints
while read -r type flag arg; do
	[[ $flag ]] || continue
	if [[ $type = \# && $(type -t "get_$flag") = function ]]; then
		"get_$flag" "$arg"
	else
		if [[ $type = : && -z "$filter" ]]; then
			filter="$flag:"
		elif [[ -z "$filter" && -n "$FILTER" ]]; then
			filter="$FILTER:"
		fi

		[[ -z "$filter" || ! $flag =~ : || $flag =~ ^$filter ]] || continue
		if [[ $flag =~ ^- ]]; then
			args+=("${flag#"$filter"}")
		elif [[ $type == : ]]; then
			args+=("${flag#"$filter"}")
		else
			args+=("--${flag#"$filter"}")
		fi
		if [[ -n $arg ]]; then
			args+=("$arg")
		fi
	fi
	((++compiler_hints)) && echo "$type ${flag#"$filter"} $arg"
done < <(
	TYPE='@|:|#'
	FILTER='-?\w+ ?[^"]+?'
	PREFIX='[ \*]+'
	sed -nE -e 's%^//'"$PREFIX"'('"$TYPE"')('"$FILTER"')$%\1 \2%p' \
		-e '/^\/\*/,/\*\/$/s/^\/?'"$PREFIX"'('"$TYPE"')('"$FILTER"')$/\1 \2/p' "$NAME" | tr -d '\r'
)

if ((compiler_hints == 0)); then
	__hint "Add '#help' as a comment to see tool help"
fi
typeset -p files
[[ -z "$filter" ]] || args=("${filter%:}" "${args[@]}")
case "$TYPE" in
	x-csrc) exec gcc "${files[@]}" -o "${NAME}.elf" "${args[@]}" ;;
	x-c++src) exec g++ "${files[@]}" -o "${NAME}.elf" "${args[@]}" ;;
	x-java)
		cd "$DIR" || exit 1
		exec javac "${args[@]}" "$NAME"
		;;
	x-arduino) exec arduino-cli "${args[@]}" --no-color "$DIR" ;;
	x-avr-csrc)
		set -e
		if [[ -z "$MCU" ]]; then
			__error "No target MCU defined"
			__hint "Add \`# avr MCU=<MCU>\` as comment."
			false
		fi

		if ! command -pv avr-gcc 2> /dev/null >&2; then
			__error "avr-gcc not installed."
			false
		fi

		avr-gcc -Wall -Os "${files[@]}" -o "$NAME.$MCU.out" "${args[@]}"
		avr-size -C "--mcu=$MCU" "$NAME.$MCU.out"
		(
			[[ "$FMT" ]] || FMT=ihex
			avr-objcopy -R .eeprom -R .fuse -R .lock -R .signature \
				-O "$FMT" "$NAME.$MCU.out" "$NAME.$MCU.${AVR_OUT["$FMT"]}"
			avr_objcopy()
			{
				avr-objcopy --no-change-warnings -j ".$1" --change-section-lma ".$1=0" \
					-O "$FMT" "$NAME.$MCU.out" "$NAME.$MCU.${2:-$1}.${AVR_OUT["$FMT"]}"
			}
			((!EEPROM)) || avr_objcopy eeprom
			((!FUSE)) || avr_objcopy fuse
			((!SIGNATURE && !SIG)) || avr_objcopy signature sig
			((!LOCK)) || avr_objcopy lock
		)
		rm -f "$NAME.$MCU.out"
		;;
	*)
		echo "Unsupported: text/${TYPE}" >&2
		exit 1
		;;
esac
