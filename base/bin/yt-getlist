#!/bin/env python3
import os
import sys
import errno
import re
import xml.etree.ElementTree as ET

from sys import argv
from base64 import b64decode

import yaml
import stagger

try:
    from yt_dlp import YoutubeDL as YDL
except ImportError:
    try:
        from youtube_dl import YoutubeDL as YDL
    except ImportError:
        print("Install either youtube-dl or yt-dlp.")
        exit(1)

from stagger.errors import NoTagError

#########################################################################
#                            Xspf Module                                #
#                  https://github.com/alastair/xspf/                    #
#########################################################################


class XspfBase(object):
    NS = "http://xspf.org/ns/0/"

    def _addAttributesToXml(self, parent, attrs):
        for attr in attrs:
            value = getattr(self, attr)
            if value:
                el = ET.SubElement(parent, "{{{0}}}{1}".format(self.NS, attr))
                el.text = value

    def _addListElements(self, parent, name, values):
        for value in values:
            el = ET.SubElement(parent, "{{{0}}}{1}".format(self.NS, name))
            el.text = value

    def _addDictionaryElements(self, parent, name, values):
        # Sort keys so we have a stable order of items for testing.
        # Alternative would be SortedDict, but is >=2.7
        for k in sorted(values.keys()):
            el = ET.SubElement(parent, "{{{0}}}{1}".format(self.NS, name))
            el.set("rel", k)
            el.text = values[k]


# Avoid namespace prefixes, VLC doesn't like it
if hasattr(ET, 'register_namespace'):
    ET.register_namespace('', XspfBase.NS)


# in-place prettyprint formatter
# From http://effbot.org/zone/element-lib.htm
def indent(elem, level=0):
    i = "\n" + level * "  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level + 1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i


class Xspf(XspfBase):
    def __init__(self, obj={}, **kwargs):
        self.version = "1"

        self._title = ""
        self._creator = ""
        self._info = ""
        self._annotation = ""
        self._location = ""
        self._identifier = ""
        self._image = ""
        self._date = ""
        self._license = ""
        self._attributions = []
        self._link = {}
        self._meta = {}

        self._trackList = []

        if len(obj):
            if "playlist" in obj:
                obj = obj["playlist"]
            for k, v in list(obj.items()):
                setattr(self, k, v)

        if len(kwargs):
            for k, v in list(kwargs.items()):
                setattr(self, k, v)

    @property
    def title(self):
        """A human-readable title for the playlist. Optional"""
        return self._title

    @title.setter
    def title(self, title):
        self._title = title

    @property
    def creator(self):
        """
        Human-readable name of the entity
        (author, authors, group, company,etc)
        that authored the playlist. Optional
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        self._creator = creator

    @property
    def annotation(self):
        """A human-readable comment on the playlist. This is character data,
           not HTML, and it may not contain markup. Optional"""
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        self._annotation = annotation

    @property
    def info(self):
        """URI of a web page to find out more about this playlist. Optional"""
        return self._info

    @info.setter
    def info(self, info):
        self._info = info

    @property
    def location(self):
        """Source URI for this playlist. Optional"""
        return self._location

    @location.setter
    def location(self, location):
        self._location = location

    @property
    def identifier(self):
        """Canonical ID for this playlist. Likely to be a hash or other
           location-independent name. Optional"""
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        self._identifier = identifier

    @property
    def image(self):
        """URI of an image to display in the absence of a trackList/image
           element. Optional"""
        return self._image

    @image.setter
    def image(self, image):
        self._image = image

    @property
    def date(self):
        """Creation date (not last-modified date) of the playlist. Optional"""
        return self._date

    @date.setter
    def date(self, date):
        self._date = date

    @property
    def license(self):
        """URI of a resource that describes the license under which this
           playlist was released. Optional"""
        return self._license

    @license.setter
    def license(self, license):
        self._license = license

    @property
    def meta(self):
        return self._meta

    def add_meta(self, key, value):
        """Add a meta element to the playlist."""
        self._meta[key] = value

    def del_meta(self, key):
        """Remove a meta element."""
        del self._meta[key]

    def add_link(self, key, value):
        """Add a link element to the playlist."""
        self._link[key] = value

    def del_link(self, key):
        """Remove a link element."""
        del self._link[key]

    def add_attribution(self, location, identifier):
        self.attrbutions.append((location, identifier))

    def truncate_attributions(self, numattributions):
        self.attrbutions = self.attributions[-numattributions:]

    # Todo: Attribution, Link, Meta, Extension

    def add_extension(self, application):
        pass

    def make_extension_element(self, namespace, name, attributes, value):
        pass

    def remove_extension(self, application):
        pass

    @property
    def track(self):
        return self._trackList

    @track.setter
    def track(self, track):
        self.add_track(track)

    def add_track(self, track={}, **kwargs):
        if isinstance(track, list):
            for t in track:
                self.add_track(t)
        elif isinstance(track, Track):
            self._trackList.append(track)
        elif isinstance(track, dict) and len(track) > 0:
            self._trackList.append(Track(track))
        elif len(kwargs) > 0:
            self._trackList.append(Track(kwargs))

    def add_tracks(self, tracks):
        for t in tracks:
            self.add_track(t)

    def toXml(self, encoding="utf-8", pretty_print=True):
        root = ET.Element("{{{0}}}playlist".format(self.NS))
        root.set("version", self.version)

        self._addAttributesToXml(root, [
            "title", "info", "creator", "annotation", "location", "identifier",
            "image", "date", "license"
        ])

        self._addDictionaryElements(root, "link", self._link)
        self._addDictionaryElements(root, "meta", self._meta)

        if len(self._trackList):
            track_list = ET.SubElement(root,
                                       "{{{0}}}trackList".format(self.NS))
            for track in self._trackList:
                track_list = track.getXmlObject(track_list)
        if pretty_print:
            indent(root)
        return ET.tostring(root, encoding)


class Track(XspfBase):
    def __init__(self, obj={}, **kwargs):
        self._location = ""
        self._identifier = ""
        self._title = ""
        self._creator = ""
        self._annotation = ""
        self._info = ""
        self._image = ""
        self._album = ""
        self._trackNum = ""
        self._duration = ""
        self._link = {}
        self._meta = {}

        if len(obj):
            for k, v in list(obj.items()):
                setattr(self, k, v)

        if len(kwargs):
            for k, v in list(kwargs.items()):
                setattr(self, k, v)

    @property
    def location(self):
        """URI of resource to be rendered. Probably an audio resource,
        but MAY be any type of
        resource with a well-known duration. Zero or more"""
        return self._location

    @location.setter
    def location(self, location):
        # Ensure that the location will internally be a list.
        # This allows backward-compatibility with invocations
        # that set location as a string.
        if not isinstance(location, list):
            self._location = [location]
        else:
            self._location = location

    @property
    def identifier(self):
        """
        ID for this resource.

        Likely to be a hash or other location-independent name,
        such as a MusicBrainz identifier.
        MUST be a legal URI. Zero or more
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        self._identifier = identifier

    @property
    def title(self):
        """
        Human-readable name of the track that
        authored the resource which defines the
        duration of track rendering. Optional
        """
        return self._title

    @title.setter
    def title(self, title):
        self._title = title

    @property
    def creator(self):
        """
        Human-readable name of the entity
        (author, authors, group, company, etc)
        that authored the resource which defines
        the duration of track rendering.
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        self._creator = creator

    @property
    def annotation(self):
        """
        A human-readable comment on the track.

        This is character data, not HTML,
        and it may not contain markup.
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        self._annotation = annotation

    @property
    def info(self):
        """
        URI of a place where this resource can be bought
        or more info can be found.

        Optional
        """
        return self._info

    @info.setter
    def info(self, info):
        self._info = info

    @property
    def image(self):
        """
        URI of an image to display for the
        duration of the track.

        Optional
        """
        return self._image

    @image.setter
    def image(self, image):
        self._image = image

    @property
    def album(self):
        """
        Human-readable name of the collection from
        which the resource which defines the
        duration of track rendering comes.

        Optional
        """
        return self._album

    @album.setter
    def album(self, album):
        self._album = album

    @property
    def trackNum(self):
        """
        Integer with value greater than zero giving
        the ordinal position of the media on the album.

        Optional
        """
        return self._trackNum

    @trackNum.setter
    def trackNum(self, trackNum):
        self._trackNum = trackNum

    @property
    def duration(self):
        """The time to render a resource, in milliseconds. Optional"""
        return self._duration

    @duration.setter
    def duration(self, duration):
        self._duration = duration

    @property
    def meta(self):
        return self._meta

    def add_meta(self, key, value):
        """Add a meta element to the playlist."""
        self._meta[key] = value

    def del_meta(self, key):
        """Remove a meta element."""
        del self._meta[key]

    def add_link(self, key, value):
        """Add a link element to the playlist."""
        self._link[key] = value

    def del_link(self, key):
        """Remove a link element."""
        del self._link[key]

    # Todo: Link, Meta, Extension

    def getXmlObject(self, parent):
        track = ET.SubElement(parent, "{{{0}}}track".format(self.NS))

        self._addAttributesToXml(track, [
            "identifier", "title", "creator", "annotation", "info", "image",
            "album", "trackNum", "duration"
        ])

        self._addListElements(track, "location", self._location)

        self._addDictionaryElements(track, "link", self._link)
        self._addDictionaryElements(track, "meta", self._meta)

        return parent


Spiff = Xspf
##################################################################


def replay_gain(config, file: str):
    if not 'FFmpegExtractAudio' in (
        post['key'] for post in config['postprocessors']
    ):
        return

    try:
        from rgain3.script.replaygain import do_gain
        do_gain([file], album=False)
    except:
        pass


def strip(_str):
    return re.sub(r'^\s+|\s+$', '', _str, flags=re.M)


def file_name(item):
    return '[{}] {} [{}].%(ext)s'.format(
        '.'.join((item['artist'] if isinstance(item['artist'], (str, )) else
                  item['artist']['sname']).split(' ')),
        '.'.join(item['title'].split(' ')), '.'.join(
            item['comment'].split(' ')))


class playlist:
    _fmts = ['m3u', 'xspf']

    def __init__(self, name='base', fmt='xspf'):
        self._ids = []
        self._fmt = fmt if fmt in self._fmts else 'xspf'
        self._name = name if isinstance(name, (str, )) else 'base'
        self._list = list() if self._fmt == 'm3u' else Xspf(
            title=name, creator="yt-getlist")

    @property
    def name(self):
        return self._name

    def append(self, item, file=None, idx=None):
        if self._fmt == 'xspf':
            _list = self._list.track
        elif self._fmt == 'm3u':
            _list = self._list
        if not item['id'] in self._ids and file:
            if self._fmt == 'xspf':
                trk = Track()
                trk.title = item['title']
                trk.creator = item['artist'] if isinstance(
                    item['artist'],
                    (str, )) else ' '.join(item['artist'].values())
                trk.annotation = item['comment'].format(**item)

                if 'album' in item:
                    trk.album = item['album'].format(**item)
                if file:
                    trk.location = file
                data = trk
            elif self._fmt == 'm3u':
                data = tuple([item['title'], file])

            if isinstance(idx, (int, )):
                _list.insert(idx, data)
            else:
                _list.append(data)

            self._ids.append(item['id'])

    def save(self):
        with open('{}.{}'.format(self.name, self._fmt), 'w') as f:
            if self._fmt == 'xspf':
                f.write(self._list.toXml().decode('utf-8'))

            elif self._fmt == 'm3u':
                for item in self._list:
                    f.write("#EXTINF:0,{}\n{}\n".format(*item))


def id3_tags(item, file):

    try:
        tags = stagger.read_tag(file)
    except NoTagError:
        return

    for key in item:
        if not key == 'id' and hasattr(tags, key):
            setattr(
                tags, key,
                item[key].format(**item) if isinstance(item[key], (str, )) else
                (' / '.join(item[key].values())
                 if key == 'text' else ' '.join(item[key].values())))
    tags.write()


def get_item(item, ydl_opts, opts):

    _item = file_name(item) % opts
    print("Downloading: {}".format(_item))
    if not os.path.exists(_item):
        if len(str.split(item['id'], ':')) > 1:
            _data = str.split(item['id'], ':')
            item['id'] = ':'.join(_data[1:])
            get_item_func = globals().get('get_item_%s' % next(iter(_data)), None)
            if callable(get_item_func):
                get_item_func(item, opts)
        else:
            with YDL(ydl_opts) as ydl:
                try:
                    ydl.download([item['id']])
                except Exception as e:
                    print(e)

    if not os.path.exists(_item):
        raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), _item)
    if os.path.isdir(_item):
        raise IsADirectoryError(errno.EISDIR, os.strerror(errno.EISDIR), _item)
    if not os.path.isfile(_item):
        raise IOError(errno.EIO, "{}, not a file".format(
            os.strerror(errno.EIO)), _item)

    if opts and opts.get('sub', None) and isinstance(
            item.get('sub', None), (list, )):
        sub = file_name(item) % {'ext': opts.get('sub', None)}
        with open(sub, 'w') as f:
            data = b64decode(''.join(item['sub']).encode('ascii'))
            try:
                data = data.decode('ascii')
            except Exception:
                data = data.decode('utf-8')
            f.write(strip(data))

    replay_gain(ydl_opts, _item)
    if opts and not opts.get('skip-tagging', False):
        id3_tags(item, _item)
    return _item


class PlaylistFactory(dict):
    def __init__(self, fmt):
        self.fmt = fmt

    def __getitem__(self, key):
        if not key in self:
            self[key] = playlist(name=key, fmt=self.fmt)
        return super().__getitem__(key)

    def save(self):
        for item in self.values():
            item.save()


def get_list(_list,
             _lists,
             ydl_opts: dict,
             opts: dict,
             current_list='base',
             lvl=0):

    for item in _list:
        _ilists = item.pop('list', [])
        if isinstance(_ilists, (str,)):
            _ilists = [_ilists]
        if not 'base' in _ilists:
            _ilists.append('base')

        try:
            ydl_opts['outtmpl'] = file_name(item)
            name = get_item(item, ydl_opts, opts)
            for clist in _ilists:
                _lists[clist].append(item, name)

        except Exception as _e:
            print(_e)
            continue


class info:
    @staticmethod
    def debug(msg):
        pass

    @staticmethod
    def warning(msg):
        pass

    @staticmethod
    def error(msg):
        import textwrap
        import itertools

        _msg = (
            *textwrap.wrap("%s" % msg.splitlines()[0].strip(' ')),
            *itertools.chain.from_iterable(
                textwrap.wrap(textwrap.indent(_msg, '  '))
                for _msg in msg.splitlines()[1:]
            )
        )
        print(*_msg, file=sys.stderr, sep='\n')

    @staticmethod
    def progress(d):
        if d['status'] == 'downloading':
            print("\r\x1B[KProgress: {} of {} at {} ETA {}".format(
                d['_percent_str'],
                d['_total_bytes_str'],
                d['_speed_str'],
                d['_eta_str']
            ), end='', flush=True)

        elif d['status'] == 'finished':
            print('\r\x1B[KProgress: 100% of {} in {}, converting ...'.format(
                d['_total_bytes_str'],
                d['_elapsed_str'],
            ), flush=True)


if __name__ == '__main__':

    try:
        with open('.list.yml', 'r') as f:
            file = yaml.load(f, Loader=yaml.FullLoader)
        ydl = file.get('ydl', dict())
        ydl.update({
            'quiet': True,
            'noprogress': False,
            'progress_hooks': [info.progress],
            'logtostderr': True,
            'logger': info,
        })

        if len(argv) > 1 and 'skip-dl' in argv:
            ydl['skip_download'] = True

        lists = PlaylistFactory(
            file.get('opts', dict()).get('list', 'xspf'))

        get_list(file['list'], lists, ydl, file.get('opts', dict()))
        lists.save()

    except FileNotFoundError:
        print('.list.yml: file not found.')
    except KeyboardInterrupt:
        print('\r\x1B[KInterrupred, quitting.')
# vim: ts=4:ft=python:noet:
