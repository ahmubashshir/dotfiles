#!/bin/bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# If not running interactively, don't do anything
case $- in
	*i*) ;;
	*) return ;;
esac

! [[ $NIX_BASH_ZSH_SWITCH == yes ]] || return # nix-shell source guard

if [ -f "$XDG_CONFIG_HOME/shell/import" ]; then
	. "$XDG_CONFIG_HOME/shell/import"
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=erasedups:ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

if [ ! -d "${XDG_STATE_HOME:-$HOME/.local/state}"/bash ]; then
	mkdir -p "${XDG_STATE_HOME:-$HOME/.local/state}"/bash
fi

HISTFILE="${XDG_STATE_HOME:-$HOME/.local/state}"/bash/history
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000
HISTTIMEFORMAT="%d.%m.%Y-%I:%M %p   "
# HSTR configuration - add this to ~/.bashrc
alias hh=hstr                    # hh to be alias for hstr
export HSTR_CONFIG=hicolor       # get more colors
#shopt -s histappend              # append new history items to .bash_history
export HSTR_PROMPT="──>>"
#export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"
# if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
if [[ $- =~ .*i.* ]]; then bind '"\C-r": "\C-a hstr -- \C-j"'; fi
# if this is interactive shell, then bind 'kill last command' to Ctrl-x k
if [[ $- =~ .*i.* ]]; then bind '"\C-xk": "\C-a hstr -k \C-j"'; fi
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
	xterm | xterm-color | *-256color | *-kitty) color_prompt=yes ;;
esac

if [ -n "$force_color_prompt" ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
	else
		color_prompt=
	fi
fi

PROMPT_COMMAND='fix_line_breaks'

if [ "$color_prompt" = yes ]; then
	PS1='\033[01;32m\u@\h\[\033[00m\] \[\033[01;34m\]\W \$\[\033[00m\] '
	fix_line_breaks()
	{
		local pos
		IFS='[;' read -p $'\033[6n' -d R -a pos -rs
		((pos[2] == 1)) || printf '\033[1m\033[47m\033[30m%%\033[39m\033[49m\033[0m\r\n'
	}
else
	PS1='\u@\h \W \$ '
	fix_line_breaks()
	{
		local pos
		IFS='[;' read -p $'\033[6n' -d R -a pos -rs
		((pos[2] == 1)) || printf '%%\r\n'
	}
fi

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
	xterm* | rxvt*)
		PS1="\[\e]0;\u@\h \W\a\]$PS1"
		;;
	*) ;;

esac

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	fi
	if [ -d ${XDG_DATA_HOME:-$HOME/.local/share}/bash/completions ]; then
		completions=$(find ${XDG_DATA_HOME:-$HOME/.local/share}/bash/completions/*)
		if [ "$completions" != "" ]; then
			for n in $completions; do
				. $n
			done
		fi
	fi
fi

if [[ "${BASH_SOURCE[1]%%.*}" == /tmp/nix-shell && "${SHELL##*/}" == bash && $(command -pv zsh) ]]; then
	NIX_BASH_ZSH_SWITCH=yes source "${BASH_SOURCE[1]}"
	export SHELL=$(command -pv zsh)
	exec -a "${SHELL##*/}" $SHELL -$-
fi
