#!/bin/zsh -x
if [ -e zprof ];then
	zmodload zsh/datetime
	setopt PROMPT_SUBST
	PS4='+$EPOCHREALTIME %N:%i> '
	logfile=$(mktemp /tmp/zsh_profile.XXXXXXXX)
	echo "Logging to $logfile"
	exec 3>&2 2>$logfile
	setopt XTRACE
fi

## variables
fpath=(~/.zsh/functions $fpath ~/.cache/zsh/compdump)
autoload -Uz $fpath[1]/*(.:t)
typeset -A ENV

## modules
zmodload -ab zsh/datetime strftime
zmodload -ab zsh/pcre pcre_compile pcre_study pcre_match
zmodload -ab zsh/sched sched
zmodload -ab zsh/system syserror sysopen sysread sysseek syswrite zsystem
zmodload zsh/zprof
zmodload zsh/zpty

## HISTCONTROL
# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=3000
HISTDUP=erase

## Lazy load section
autoload -Uz add-zsh-hook
autoload -Uz zplug

# compile this file
zrecompile_start&!
## Start
case "$TERM" in
	xterm|xterm-color|*-256color) ENV[color_prompt]=yes;;
esac
## local plugins
# zplug async
{
	ZSH_HACKER_QUOTES_ENABLE_WHEN_INTERACTIVE=1
} && zplug hacker-quotes
zplug git
zplug bd && {
	unalias .. ... ....
}
zplug lazyload
zplug completions
zplug auto-notify && {
	AUTO_NOTIFY_THRESHOLD=20
	AUTO_NOTIFY_EXPIRE_TIME=5000
	AUTO_NOTIFY_WHITELIST=()
	AUTO_NOTIFY_IGNORE+=(
		man info
		gcc g++ pbi wormhole
		shit danime git
		nano xed gedit vi vim
		vlc mpv celluloid
		yay pacman bc
	)
}
zplug systemd
zplug autopair
zplug syntax-highlighting
zplug you-should-use && {
	YSU_MESSAGE_POSITION=after
#	YSU_HARDCORE=1
	YSU_MESSAGE_FORMAT="$(print -P %B%F{cyan})Use \"$(print -P %F{blue})%alias$(print -P %F{cyan})\", $(print -P %F{red})you little shit!$(print -P %b%f)"
	function ysu:start { enable_you_should_use; }
	function ysu:stop { disable_you_should_use; }
	function ysu:stat {
		echo YSU Stats
		check_alias_usage 2>&1|grep -v 'entry='
	}
}
zplug bash-completions-fallback
zplug zshmarks && {
	alias jmp=jump
	alias mark=bookmark
	alias unmark=deletemark
	alias lsmark=showmarks
}
zplug history-substring-search && {
	bindkey "$terminfo[kcuu1]" history-substring-search-up
	bindkey "$terminfo[kcud1]" history-substring-search-down
}
## options
setopt extended_glob prompt_subst
setopt +o nomatch
setopt hist_fcntl_lock inc_append_history extended_history
setopt hist_no_store hist_reduce_blanks share_history
setopt hist_expire_dups_first hist_ignore_dups hist_ignore_all_dups
setopt hist_ignore_space hist_find_no_dups hist_save_no_dups hist_verify
setopt auto_cd auto_pushd pushd_silent pushd_to_home pushd_ignore_dups pushd_minus
bindkey -e

## Zstyle Config
# The following lines were added by compinstall
zstyle :compinstall filename '/home/mubashshir/.zshrc'
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _list _expand _complete _ignored _match _correct _approximate _prefix
zstyle ':completion:*' completions set
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort name
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' glob set
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*'
zstyle ':completion:*' max-errors 1
zstyle ':completion:*' menu select=0
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' prompt 'Correct'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' substitute set
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*' list-grouped true
zstyle ':completion:*' list-dirs-first true
zstyle ':completion:*' list-rows-first true
zstyle ':completion:*' remove-all-dups true #
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zsh/compcache


zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' gain-privileges true
zstyle ':completion:*:kill:*' force-list always

#zstyle ':completion:*:(all-|)files' ignored-patterns '(|*/)CVS'
#zstyle ':completion:*:cd:*' ignored-patterns '(*/)#CVS'

#zstyle ':completion:*:match:*' original only
#zstyle -e ':completion:*:approximate:*' \
	#max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'


## ignore invalid commands
#zshaddhistory() { whence ${${(z)1}[1]} >| /dev/null || return 1 }

## Zsh Hook Functions
function xterm_title_precmd {
	print -Pn "\e]2;zsh@$$ [%1~]\a"
}
function xterm_title_preexec {
	{
		sleep 0.003
		local proc=( $(pgrep -nlP $$) )
		{
			[[ $proc[2] = zsh ]] || ! [[ -d /proc/$proc[1] ]]
		} && return
		print -Pn "\e]2;$proc[2]@$proc[1] [%1~]\a"
	} &!
}
function reset_broken_terminal {
	printf '%b' '\e[0m\e(B\e)0\017\e[?5l\e7\e[0;0r\e8'
}
# zsh hooks
add-zsh-hook -Uz precmd reset_broken_terminal
if [[ "$TERM" == (alacritty*|gnome*|konsole*|putty*|rxvt*|screen*|tmux*|xterm*) ]]; then
	add-zsh-hook -Uz precmd xterm_title_precmd
	add-zsh-hook -Uz preexec xterm_title_preexec
fi

# Prompt Setup
if [[ $ENV[color_prompt] = yes ]];then
	function chpwd {
		[[ $PWD =~ ^/run/user/[[:digit:]]*/gvfs/[[:print:]] ]] && ENV[in_vfs]=true
		if ${ENV[in_vfs]:-false};then
			if [[ ${PWD}/ =~ ^${ENV[vfs_root]}/ ]];then
				ENV[vfs_root]=$(sed -En 's@(/run/user/[[:digit:]]+/gvfs/[[:alnum:]:=,.-]*)($|/.*)@\1/@;p' <<<$PWD)
				ENV[vfs_url]=$(echo -e $(sed -nE 's@/run/user/[[:digit:]]+/gvfs/([[:alnum:]:=%,.-]*)($|/.*)@\1@;s@([[:alnum:]]*)(:[[:alnum:]:=%,.-]*),(s)sl=true(.*)@\1\3\2\4@;s@([[:alnum:]]*):@\1://@;s/host=(.*)/\1/;/user=/{s://([[:alnum:]].*),user=(.*)://\2@\1:};/(,|)prefix=/{s@(,|)prefix=(.*)@\2@;s/%(..)/\\x\1/g;};p' <<<$PWD))
				ENV[vfs]=$'\n'"├────[%F{yellow}VFS %F{green}${ENV[vfs_url]}%F{red}]"
			fi
			[[ ${PWD} = ^${ENV[vfs_root]} ]] && ENV[vfs_pwd]=/
		else
			unset ENV[in_vfs] ENV[vfs] ENV[vfs_url]	ENV[vfs_root] ENV[vfs_pwd]
		fi
	}
	for n in $chpwd_functions chpwd;do
		$n
		unset n
	done
	function precmd {
		[[ -n $VIRTUAL_ENV ]] && {
			VENV_PROMPT="-[%F{cyan}%B %F{green}${VIRTUAL_ENV##*/}%b%F{red}]"
		} || VENV_PROMPT=""
	}
	PROMPT=$'%F{red}╭───[%B%F{blue}%D{%l}%F{green}:%F{blue}%D{%M}%F{green}:%F{blue}%D{%S} %F{green}%D{%p}%b%F{red}]-[%F{green} %F{cyan}%B${ENV[vfs_pwd]:-%1~}%b%F{red}]${ENV[vfs]}\n%F{red}├───[%Btty:%F{cyan}%y%b%F{red}]${GITSTATUS_PROMPT}${VENV_PROMPT}\n╰─%(?.>>.%F{cyan}>>)%F{lightgreen} '
	RPROMPT='%(?..%F{red}%?%f)'
else
	PROMPT='[%m::%n %1~]$ '
fi
if [[ $(get_term) = octopi ]];then
	unset PS1 PS2 PS3 PS4 HISTFILE
fi

# suffix aliases
{
	function jq-pager {
		[ -z "$1" ] && return
		[ -x /usr/bin/jiq ] && jiq < "$1" || { jq -C '.' "$@"|less;}
	}
	alias -s json='jq-pager'
	alias -s {txt,md}='less'
	alias -s {c,cpp,h,hpp,cxx,cc,hh}='nano'
	alias -s html='lynx'
}

zcompinit
if [ -e zprof ];then
	unsetopt XTRACE
	exec 2>&3 3>&-
fi

zplug startup-timer
