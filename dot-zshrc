#!/bin/zsh
zmodload zsh/datetime
setopt PROMPT_SUBST
PS4='+$EPOCHREALTIME %N:%i> '
logfile=$(mktemp /tmp/zsh_profile.XXXXXXXX)
echo "Logging to $logfile"
exec 3>&2 2>$logfile

setopt XTRACE

## variables
fpath+=(~/.zsh/functions)
cmdignore=+(man info gcc g++ shit nano xed gedit vlc)

## modules
zmodload -ab zsh/datetime strftime
zmodload -ab zsh/pcre pcre_compile pcre_study pcre_match
zmodload -ab zsh/sched sched
zmodload -ab zsh/system syserror sysopen sysread sysseek syswrite zsystem
zmodload zsh/zprof
zmodload zsh/zpty

## HISTCONTROL
# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=3000
HISTDUP=erase

## Lazy load section
autoload -Uz compinit
autoload -Uz add-zsh-hook
autoload -Uz bashcompinit
autoload -Uz bashcompsys
autoload -Uz zsh-gitstatus
autoload -Uz zsh-async
autoload -Uz vcs_info
## Start
add-zsh-hook chpwd 00_check_vfs
zsh-async
zsh-gitstatus
setopt extended_glob prompt_subst
setopt +o nomatch
setopt autocd incappendhistory extendedhistory
setopt histfcntllock histnostore histreduceblanks sharehistory
setopt histexpiredupsfirst histignoredups histignorealldups
setopt histignorespace histfindnodups histsavenodups
# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

[ -z $(get_termemu|grep 'geany') ] && HISTFILE=${HISTFILE:-~/.zsh_history}
#source ~/.zsh/notifyosd

## Zstyle Config
zstyle :compinstall filename '/home/mubashshir/.zshrc'
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _list _expand _complete _ignored _match _correct _approximate _prefix
zstyle ':completion:*' completions set
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' file-sort name
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' glob set
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*'
zstyle ':completion:*' max-errors 1
zstyle ':completion:*' menu select=0
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' prompt 'Correct'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' substitute set
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':vcs_info:*'   enable  git
zstyle ':vcs_info:*'   formats '%s;%b;%i;%c;%u;%r;%S'
zstyle ':vcs_info:*'   actionformats '%s;%b;%i;%c;%u;%r;%S;%a'
zstyle ':vcs_info:*'   check-for-changes true
zstyle ':vcs_info:*'   check-for-staged-changes true

# The following lines were added by compinstall
if [ -f $HOME/.zinputrc ];then
	. $HOME/.zinputrc
fi

# Set up the prompt

case "$TERM" in
	xterm|xterm-color|*-256color) color_prompt=yes;;
esac
## customize
00_check_vfs()
{
	[[ $PWD =~ ^/run/user/[[:digit:]]*/gvfs/[[:print:]]*$ ]] && export ___gnome_vfs=true || unset ___gnome_vfs
}
[ -e ~/.zsh/git_super_status ] && source ~/.zsh/git_super_status
export GPG_TTY=$(tty)
if [ -e ./.env_setup ];then
	source .env_setup
fi
chpwd()
{
	00_check_vfs
	unset ____vfs ____cwd
	if ${___gnome_vfs:-false};then
		____vfs=$'\n'"├────[%F{yellow}VFS %F{green}$(echo ${PWD}|tr / \\n|grep ':host='|(read k;echo -n $k|cut -d: -f1;echo -n '://';echo -n $k|cut -d: -f2|tr , \\n|(grep '^user' && echo @)|cut -d= -f2;echo -n $k|cut -d: -f2|tr , \\n|grep '^host'|cut -d= -f2)|tr -d \\n;echo)%F{red}]"
		____cwd=$(echo ${PWD##*/}|tr / \\n|tail -1|(read k;echo $k|grep -v ':host=' || echo /))
	else
		[[ $PWD == $HOME ]]&&____cwd='~'||____cwd=$(basename $PWD)
	fi
	export ____vfs ____cwd
}
chpwd
if [[ $color_prompt = yes ]];then
	precmd()
	{
		RETVAL=$?
		unset ____gs
		[[ $RETVAL -ne 0 ]] &&	sym="%F{magenta}>>" || sym=">>"
		[[ $RETVAL -ne 0 ]] && ret="%F{red}$RETVAL%F{green}"||ret=""
		if ! ${___gnome_vfs:-false} && ( [ -d ./.git ] || /usr/bin/git rev-parse --git-dir &> /dev/null);then
			____gs=$(git_super_status)
		fi
		if [[ ! ${GPG_TTY##*/} =~ tty[[:digit:]]+ ]];then
			printf "\033];%s\07" "zsh($$): $USER [$____cwd]"
		fi &!
		if ${ZCOMPILED:-false};then
			compinit -C
			unset ZCOMPILED
		fi
		PROMPT="%F{red}┌───=[%F{yellow}%B%m%F{red}%b::%F{green}%n%F{red}]"$'\n'"%F{red}├────[pts:${GPG_TTY##*/}]-[%F{cyan}$____cwd%F{red}]$____vfs$____gs"$'\n'"└─$sym%F{lightgreen} "
		RPROMPT="$ret"
	}
else
	precmd()
	{
		PROMPT="[%m::%n $____cwd]$ "
	}
fi
reload()
{
	source ~/.zshrc
	source ~/.zshenv
	rm $HOME/.cache/zsh/compdump
	compinit
	bashcompinit
}
zcompaliases()
{
	compdef https=http
	compdef userctl=systemctl
	compdef yt-dl=youtube-dl
	compdef yt-mp3=youtube-dl
	compdef commit=git
	compdef clone=git
	compdef push=git
	compdef tag=git
	compdef add=yay
	compdef del=yay
	compdef upd=yay

}
start_zcompile()
{
	  	zcompare "$HOME/.cache/zsh/compdump"
	  	export ZCOMPILED=true
}
compinit
start_zcompile&!
zcompaliases

bashcompinit
bashcompsys
bashcompadd cpu-x winetricks

unsetopt XTRACE
exec 2>&3 3>&-
